require('test/stubs')
_G.cts = require('ClassicTargetSet')

local function testSetTarget()
   it('replaces only target when set', function()
         result = cts.setTarget('/target', 'bar')
         assert_equal(result, '/target')
   end)
   it('replaces tar', function()
         result = cts.setTarget('/tar x', 'bar')
         assert_equal(result, '/tar bar')
   end)
   it('replaces target', function()
         result = cts.setTarget('/target x', 'bar')
         assert_equal(result, '/target bar')
   end)
   it('replaces target_', function()
         result = cts.setTarget('/target_ x', 'bar')
         assert_equal(result, '/target_ bar')
   end)
   it('replaces target if restricted', function()
         result = cts.setTarget('/target [noexists] x', 'bar')
         assert_equal(result, '/target [noexists] bar')
   end)
   it('replaces target if very restricted', function()
         result = cts.setTarget('/target [noexists, harmful] x', 'bar')
         assert_equal(result, '/target [noexists, harmful] bar')
   end)
   it('replaces target only to eol', function()
         result = cts.setTarget('/target\n[noexists] x', 'bar')
         assert_equal(result, '/target\n[noexists] x')
   end)
   it('replaces target in restriction', function()
         result = cts.setTarget('/spell [target=x] cast', 'bar')
         assert_equal(result, '/spell [target=bar] cast')
   end)
   it('replaces target in restriction with spaces', function()
         result = cts.setTarget('/spell [target = x] cast', 'bar')
         assert_equal(result, '/spell [target = bar] cast')
   end)
   it('replaces target in restriction with enum', function()
         result = cts.setTarget('/spell [target=x,harm] cast', 'bar')
         assert_equal(result, '/spell [target=bar,harm] cast')
   end)
   it('replaces target in restriction with enum 2', function()
         result = cts.setTarget('/spell [harm,target=x] cast', 'bar')
         assert_equal(result, '/spell [harm,target=bar] cast')
   end)
   it('replaces tankname', function()
         result = cts.setTarget('#showtooltip\n/SpellStopCasting()\n/cast [target=tankname] Polymorph', 'bar')
         assert_equal(result, '#showtooltip\n/SpellStopCasting()\n/cast [target=bar] Polymorph')
   end)
end

describe('setTarget', testSetTarget)
